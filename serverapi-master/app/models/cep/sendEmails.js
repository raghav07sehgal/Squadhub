'use strict';
const nodemailer = require('nodemailer');
var property = require('../../utils/property.json');
var icalToolkit = require('../../lib/main');

module.exports.sendResponse = function (req, res) {
	res.write('some html');
}
let isSendEmail = false;
exports.sendEmail = async function (req, res) {
	if (isSendEmail) {
		const smtpConfig = {
			service: 'gmail', port: 587,
			secur: false, auth: {
				user: '',
				pass: ''
			}
		};

		let toEmailList = req.body.toEmails;
		let assignee = req.body.userData.userData.displayName;
		let assignTo = req.body.assignuserData[0].userNames;
		let assignHours = req.body.assignuserData[0].assignHours;
		let ticket = req.body.assignuserData[0].issues;
		//req.body.assignuserData[0].startDate
		let startDate = new Date();
		startDate.setHours(8, 0, 0, 0);
		let endDate = new Date();
		endDate.setHours(17, 0, 0, 0);
		let ticket_link = "https://cep.niit.com/browse/";// + ticket;
		let attendeesEmails = req.body.attendeesEmails;

		var builder = icalToolkit.createIcsFileBuilder();
		builder.spacers = true; //Add space in ICS file, better reading
		builder.NEWLINE_CHAR = '\r\n'; //Newline char to use
		builder.throwError = false; //If true throws errors, else returns error
		builder.ignoreTZIDMismatch = true; //If TZID is invalid, ignore or not to ignore!
		builder.calname = 'Assig Task';
		builder.timezone = 'asia/kalcutta';
		builder.method = 'REQUEST';
		builder.events.push({
			start: startDate,
			end: endDate,
			transp: 'OPAQUE',
			summary: 'Assign Task',
			alarms: [15, 10, 5], //Alarms, array in minutes
			additionalTags: {}, //Optional
			uid: null, //Optional, default autogenerated
			sequence: null, //The sequence number in update, Default: 0
			repeating: {
				freq: 'DAILY',
				count: 8,
				interval: 24,
				until: endDate
			},
			allDay: false,
			//stamp: new Date(),
			floating: false,
			location: 'NIIT Confluence',
			description: 'Assign Task',
			organizer: {
				"name": "Squadhub Admin",
				"email": 'noreply@niit.com',
				"sentBy": ''
			},
			attendees: getAttendees(attendeesEmails),
			method: 'PUBLISH',
			status: 'CONFIRMED',
			url: 'https://cep.niit.com'
		});
		// builder.additionalTags = {
		// 	// 'SOMETAG': 'SOME VALUE'
		// };
		var icsFileContent = builder.toString();
		if (icsFileContent instanceof Error) {
			console.log('Returned Error, you can also configure to throw errors!');
		}
		const transport = nodemailer.createTransport(smtpConfig);
		const message = {
			// from: 'shahid.husain@niit.com',
			to: toEmailList,
			subject: "" + ticket,
			html: 'Hi, <br /><br /><br />This ticket (<a href="' + ticket_link + '">' + ticket
				+ '</a>) has assigned by ' + assignee
				+ '.<br /><br />Thanks, <br />' + assignee, // plain text body,
			icalEvent: {
				contentType: "text/calendar",
				content: builder.toString(),
				method: 'REQUEST'
			}
		};

		transport.sendMail(message, (err, message) => {
			console.log(err, message);
		});

		function getAttendees(attendeesEmails) {
			let emailArray = [];
			for (let i = 0; i < attendeesEmails.length; i++) {
				let email = {
					name: attendeesEmails[i].username, //Required
					email: attendeesEmails[i].email, //Required
					status: 'TENTATIVE', //Optional
					role: 'REQ-PARTICIPANT', //Optional
					rsvp: true //Optional
				}
				emailArray.push(email);
			}
			return emailArray;
		}
	}
}

